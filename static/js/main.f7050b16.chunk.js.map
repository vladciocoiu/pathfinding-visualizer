{"version":3,"sources":["Components/Navbar/Dropdown/Dropdown.jsx","Components/Navbar/HelpPanel/Pages/NodesPage.jsx","Components/Navbar/HelpPanel/Pages/AlgorithmsPage.jsx","Components/Navbar/HelpPanel/Pages/StartPage.jsx","Components/Navbar/HelpPanel/HelpPanel.jsx","Components/Navbar/Navbar.jsx","Algorithms/Dijkstra.js","Algorithms/AStar.js","Algorithms/DFS.js","Algorithms/BFS.js","Components/Node/Node.jsx","Components/Grid/Grid.jsx","Algorithms/ShortestPath.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","changeAlg","className","onClick","NodesPage","viewBox","d","map","text","index","key","AlgorithmsPage","name","article","description","alg","Fragment","href","target","rel","StartPage","string","HelpPanel","content","show","setShow","useState","currentPage","setCurrentPage","Navbar","animate","reset","currAlg","helpPressed","setHelpPressed","bestNode","grid","smallestRow","smallestCol","minDist","Infinity","i","length","j","distance","isVisited","updateNeighbours","currentNode","dx","dy","ni","row","nj","col","isWall","previous","dist","a","b","Math","abs","bestScore","scores","discoveredNodes","minScore","node","fScore","finishNode","has","add","visitedNodes","stack","push","queue","Node","props","handleMouseDown","handleMouseUp","handleMouseOver","isStart","isFinish","canChange","setCanChange","id","onMouseDown","onMouseUp","onMouseOver","NUMBER_OF_ROWS","window","innerWidth","floor","innerHeight","NUMBER_OF_COLUMNS","startRow","startCol","finishRow","finishCol","Grid","makeInitialGrid","nodes","setNodes","mouseIsPressed","setMouseIsPressed","currentAlgorithm","setCurrentAlgorithm","buttonsLocked","setButtonsLocked","startIsBeingMoved","setStartIsBeingMoved","finishIsBeingMoved","setFinishIsBeingMoved","useEffect","document","body","addEventListener","resetPath","newNodes","newNode","getElementById","makeWall","setTimeout","newGrid","moveStart","moveFinish","slice","startNode","visitedNodesInOrder","Dijkstra","Set","size","delete","AStar","visitedSet","pop","DFS","shift","BFS","shortestPathNodes","animatePath","unshift","getShortestPath","currentRow","rowIndex","newStartNode","createNode","newFinishNode","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7050b16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Dropdown.css\";\r\n\r\nexport default function Dropdown({ changeAlg }) {\r\n   return (\r\n      <div className=\"dropdown\">\r\n         <button className=\"dropdown-button\">Pick an algorithm</button>\r\n         <div className=\"dropdown-content\">\r\n            <button\r\n               className=\"dijkstra\"\r\n               onClick={() => changeAlg(\"Dijkstra's\")}\r\n            >\r\n               Dijkstra's\r\n            </button>\r\n            <button className=\"a-star\" onClick={() => changeAlg(\"A*\")}>\r\n               A*\r\n            </button>\r\n            <button className=\"dfs\" onClick={() => changeAlg(\"DFS\")}>\r\n               DFS\r\n            </button>\r\n            <button className=\"bfs\" onClick={() => changeAlg(\"BFS\")}>\r\n               BFS\r\n            </button>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./NodesPage.css\";\r\n\r\nexport default function NodesPage() {\r\n   const desc = [\r\n      \"An unvisited node. The algorithm never considered it for its path.\",\r\n      \"A visited node. The algorithm checked it, but it wasn't good enough to be a part of the path.\",\r\n      \"A path node. The algorithm chose this as one of the nodes that represent the path.\",\r\n      \"A wall. The path cannot go through it and the algorithm ignores it. You can turn nodes into walls / remove walls by clicking on them.\",\r\n      \"The start and finish nodes. They represent the extremities of the path. You can drag them around in order to change their positions.\",\r\n   ];\r\n\r\n   return (\r\n      <div className=\"nodes-page\">\r\n         <h2 className=\"nodes-page-title\">Nodes</h2>\r\n         <div className=\"unvisited\"></div>\r\n         <div className=\"visited\"></div>\r\n         <div className=\"shortest-path\"></div>\r\n         <div className=\"wall\"></div>\r\n         <div className=\"start-and-finish\">\r\n            <svg viewBox=\"0 0 16 16\" className=\"start-icon\">\r\n               <path d=\"M15.375,7L10,2.54C9.695,2.287,9.461,2,9,2C8.375,2,8,2.516,8,3v3H1C0.45,6,0,6.45,0,7v2c0,0.55,0.45,1,1,1h7v3  c0,0.484,0.375,1,1,1c0.461,0,0.695-0.287,1-0.54L15.375,9C15.758,8.688,16,8.445,16,8S15.758,7.313,15.375,7z\" />\r\n            </svg>\r\n            <svg className=\"finish-icon\" viewBox=\"0 0 365.696 365.696\">\r\n               <path d=\"m243.1875 182.859375 113.132812-113.132813c12.5-12.5 12.5-32.765624 0-45.246093l-15.082031-15.082031c-12.503906-12.503907-32.769531-12.503907-45.25 0l-113.128906 113.128906-113.132813-113.152344c-12.5-12.5-32.765624-12.5-45.246093 0l-15.105469 15.082031c-12.5 12.503907-12.5 32.769531 0 45.25l113.152344 113.152344-113.128906 113.128906c-12.503907 12.503907-12.503907 32.769531 0 45.25l15.082031 15.082031c12.5 12.5 32.765625 12.5 45.246093 0l113.132813-113.132812 113.128906 113.132812c12.503907 12.5 32.769531 12.5 45.25 0l15.082031-15.082031c12.5-12.503906 12.5-32.769531 0-45.25zm0 0\" />\r\n            </svg>\r\n         </div>\r\n         {desc.map((text, index) => (\r\n            <h5 className={\"desc-\" + index} key={index}>\r\n               {text}\r\n            </h5>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./AlgorithmsPage.css\";\r\n\r\nexport default function AlgorithmsPage() {\r\n   const algs = [\r\n      {\r\n         name: \"Dijkstra's\",\r\n         article: \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\",\r\n         description:\r\n            \"Dijkstra's algorithm is the fastest known single-source shortest-path algorithm \" +\r\n            \"for arbitrary directed graphs. \",\r\n      },\r\n      {\r\n         name: \"A*\",\r\n         article: \"https://en.wikipedia.org/wiki/A*_search_algorithm\",\r\n         description:\r\n            \"The A* algorithm is the most popular pathfinding algorithm used in many applications such as video games. \" +\r\n            \"It is generally faster than Dijkstra's algorithm but it can't be used in every situation.\",\r\n      },\r\n      {\r\n         name: \"DFS\",\r\n         article: \"https://en.wikipedia.org/wiki/Depth-first_search\",\r\n         description:\r\n            \"The depth-first search algorithm is a graph traversal algorithm that can visit all the nodes in linear time complexity,\" +\r\n            \" but it doesn't always find the shortest path.\",\r\n      },\r\n      {\r\n         name: \"BFS\",\r\n         article: \"https://en.wikipedia.org/wiki/Breadth-first_search\",\r\n         description:\r\n            \"The other popular graph traversal algorithm, the breadth-first search also doesn't always find the shortest path, but \" +\r\n            \"it is identical to Dijkstra's algorithm in this application, since the distance between two adjacent nodes is always 1.\",\r\n      },\r\n   ];\r\n\r\n   return (\r\n      <div className=\"algorithms-page\">\r\n         <h2 className=\"algorithms-page-title\">Algorithms</h2>\r\n         {algs.map((alg, index) => (\r\n            <React.Fragment key={index}>\r\n               <a\r\n                  href={alg.article}\r\n                  className={\"alg-\" + index}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n               >\r\n                  {alg.name}\r\n               </a>\r\n               <h5 className={\"desc-\" + index}>{alg.description}</h5>\r\n            </React.Fragment>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./StartPage.css\";\r\n\r\nexport default function StartPage() {\r\n   const text = [\r\n      \"Here you can visualize some pathfinding algorithms, \" +\r\n         \"using a grid. \" +\r\n         \"This app is pretty simple and intuitive (I hope) to use. There are 3 steps:\",\r\n      \"1. Pick an algorithm\",\r\n      \"2. Create walls and/or move the start and finish nodes\",\r\n      \"3. Visualize!\",\r\n      \"I hope you enjoy my app. Good luck!\",\r\n   ];\r\n\r\n   return (\r\n      <div className=\"start-page\">\r\n         <h2 className=\"start-page-title\">\r\n            Welcome to my pathfinding visualizer!\r\n         </h2>\r\n         {text.map((string, index) => (\r\n            <h5 className={\"text-\" + index} key={index}>\r\n               {string}\r\n            </h5>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../../Grid/Grid.css\";\r\nimport \"./HelpPanel.css\";\r\nimport NodesPage from \"./Pages/NodesPage.jsx\";\r\nimport AlgorithmsPage from \"./Pages/AlgorithmsPage.jsx\";\r\nimport StartPage from \"./Pages/StartPage.jsx\";\r\n\r\nexport default function HelpPanel({ show, setShow }) {\r\n   const [currentPage, setCurrentPage] = useState(0);\r\n\r\n   let content;\r\n   if (currentPage === 0) content = <StartPage />;\r\n   if (currentPage === 1) content = <NodesPage />;\r\n   else if (currentPage === 2) content = <AlgorithmsPage />;\r\n\r\n   return (\r\n      <div className={\"help  \" + (show ? \"help-show\" : \"help-hide\")}>\r\n         <div className=\"help-buttons\">\r\n            <div className=\"tabs\">\r\n               <div\r\n                  className={\r\n                     \"help-page-button start-tab \" +\r\n                     (currentPage === 0 ? \"active\" : \"inactive\")\r\n                  }\r\n                  onClick={() => setCurrentPage(0)}\r\n               >\r\n                  <h4>Start</h4>\r\n               </div>\r\n               <div\r\n                  className={\r\n                     \"help-page-button nodes-tab \" +\r\n                     (currentPage === 1 ? \"active\" : \"inactive\")\r\n                  }\r\n                  onClick={() => setCurrentPage(1)}\r\n               >\r\n                  <h4>Nodes</h4>\r\n               </div>\r\n               <div\r\n                  className={\r\n                     \"help-page-button algorithms-tab \" +\r\n                     (currentPage === 2 ? \"active\" : \"inactive\")\r\n                  }\r\n                  onClick={() => setCurrentPage(2)}\r\n               >\r\n                  <h4>Algorithms</h4>\r\n               </div>\r\n            </div>\r\n\r\n            <div\r\n               className=\"help-page-button exit-button active\"\r\n               onClick={() => setShow(false)}\r\n            >\r\n               <svg className=\"x\" viewBox=\"0 0 24 24\">\r\n                  <path d=\"M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z\" />\r\n               </svg>\r\n            </div>\r\n         </div>\r\n         <div className=\"help-content\">{content}</div>\r\n      </div>\r\n   );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Dropdown from \"./Dropdown/Dropdown.jsx\";\r\nimport HelpPanel from \"./HelpPanel/HelpPanel.jsx\";\r\nimport \"./Navbar.css\";\r\n\r\nexport default function Navbar({ animate, reset, changeAlg, currAlg }) {\r\n   const [helpPressed, setHelpPressed] = useState(true);\r\n\r\n   return (\r\n      <nav>\r\n         <HelpPanel show={helpPressed} setShow={setHelpPressed} />\r\n         <div className=\"title\">\r\n            <h2>PATHFINDING VISUALIZER</h2>\r\n         </div>\r\n         <div className=\"center-button\">\r\n            <button className=\"visualize-button\" onClick={() => animate()}>\r\n               {\"Visualize \" + currAlg}\r\n            </button>\r\n         </div>\r\n         <div className=\"other-buttons\">\r\n            <Dropdown changeAlg={changeAlg} />\r\n            <button className=\"reset-button\" onClick={() => reset()}>\r\n               Reset the grid\r\n            </button>\r\n            <button\r\n               className=\"help-button\"\r\n               onClick={() => setHelpPressed(true)}\r\n            >\r\n               Help\r\n            </button>\r\n         </div>\r\n      </nav>\r\n   );\r\n}\r\n","export default function Dijkstra(grid, startNode, finishNode) {\r\n   let visitedNodesInOrder = [];\r\n\r\n   // start with the first node\r\n   startNode.distance = 0;\r\n\r\n   while (true) {\r\n      // find the node with the smallest distance that wasn't already visited\r\n      const currentNode = bestNode(grid);\r\n\r\n      if (currentNode === null) return visitedNodesInOrder;\r\n      currentNode.isVisited = true;\r\n\r\n      // if the current node is the final node\r\n      if (\r\n         currentNode.row === finishNode.row &&\r\n         currentNode.col === finishNode.col\r\n      )\r\n         return visitedNodesInOrder;\r\n\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      // update the distances of the neighbors of the current node\r\n      updateNeighbours(grid, currentNode);\r\n   }\r\n}\r\n\r\nfunction bestNode(grid) {\r\n   let smallestRow,\r\n      smallestCol,\r\n      minDist = Infinity;\r\n   for (let i = 0; i < grid.length; i++)\r\n      for (let j = 0; j < grid[i].length; j++)\r\n         if (grid[i][j].distance < minDist && !grid[i][j].isVisited) {\r\n            minDist = grid[i][j].distance;\r\n            smallestRow = i;\r\n            smallestCol = j;\r\n         }\r\n   return smallestRow != null && smallestCol != null\r\n      ? grid[smallestRow][smallestCol]\r\n      : null;\r\n}\r\n\r\nfunction updateNeighbours(grid, currentNode) {\r\n   const dx = [-1, 0, 0, 1];\r\n   const dy = [0, -1, 1, 0];\r\n\r\n   // a little trick from Topcoder to access the adjacent nodes\r\n   for (let d = 0; d < 4; d++) {\r\n      const ni = currentNode.row + dx[d];\r\n      const nj = currentNode.col + dy[d];\r\n      if (\r\n         ni < 0 ||\r\n         ni >= grid.length ||\r\n         nj < 0 ||\r\n         nj >= grid[0].length ||\r\n         grid[ni][nj].isWall\r\n      )\r\n         continue;\r\n      if (currentNode.distance + 1 < grid[ni][nj].distance) {\r\n         grid[ni][nj].distance = currentNode.distance + 1;\r\n         grid[ni][nj].previous = currentNode;\r\n      }\r\n   }\r\n}\r\n","export default function AStar(grid, startNode, finishNode) {\r\n   let visitedNodesInOrder = [];\r\n   let discoveredNodes = new Set();\r\n   discoveredNodes.add(startNode);\r\n   startNode.distance = 0;\r\n\r\n   // fscore[i][j] represents the current best guess\r\n   // for a path from start to end that goes through grid[i][j]\r\n   let fScore = [];\r\n   for (let i = 0; i < grid.length; i++) {\r\n      fScore[i] = [];\r\n      for (let j = 0; j < grid[i].length; j++) fScore[i][j] = Infinity;\r\n   }\r\n   fScore[startNode.row][startNode.col] = dist(startNode, finishNode);\r\n\r\n   while (discoveredNodes.size) {\r\n      const currentNode = bestScore(grid, fScore, discoveredNodes);\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      if (\r\n         currentNode.row === finishNode.row &&\r\n         currentNode.col === finishNode.col\r\n      )\r\n         return visitedNodesInOrder;\r\n\r\n      discoveredNodes.delete(grid[currentNode.row][currentNode.col]);\r\n      updateNeighbours(grid, currentNode, fScore, discoveredNodes, finishNode);\r\n   }\r\n   return visitedNodesInOrder;\r\n}\r\n\r\n// this is the distance function used in A*\r\n// it is called Manhattan distance and it represents\r\n// the distance between 2 cells measured along axes at right angles\r\nfunction dist(a, b) {\r\n   return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);\r\n}\r\n\r\nfunction bestScore(grid, scores, discoveredNodes) {\r\n   let smallestRow,\r\n      smallestCol,\r\n      minScore = Infinity;\r\n   for (let node of discoveredNodes) {\r\n      const [row, col] = [node.row, node.col];\r\n      if (scores[row][col] === null) continue;\r\n      if (scores[row][col] < minScore) {\r\n         minScore = scores[row][col];\r\n         smallestRow = row;\r\n         smallestCol = col;\r\n      }\r\n   }\r\n   return grid[smallestRow][smallestCol];\r\n}\r\n\r\nfunction updateNeighbours(\r\n   grid,\r\n   currentNode,\r\n   fScore,\r\n   discoveredNodes,\r\n   finishNode\r\n) {\r\n   const dx = [-1, 0, 0, 1];\r\n   const dy = [0, -1, 1, 0];\r\n\r\n   // a little trick from Topcoder to access the adjacent nodes\r\n   for (let d = 0; d < 4; d++) {\r\n      const ni = currentNode.row + dx[d];\r\n      const nj = currentNode.col + dy[d];\r\n      if (\r\n         ni < 0 ||\r\n         ni >= grid.length ||\r\n         nj < 0 ||\r\n         nj >= grid[0].length ||\r\n         (grid[ni][nj].isWall &&\r\n            (ni !== finishNode.row || nj !== finishNode.col))\r\n      )\r\n         continue;\r\n\r\n      if (currentNode.distance + 1 < grid[ni][nj].distance) {\r\n         grid[ni][nj].distance = currentNode.distance + 1;\r\n         grid[ni][nj].previous = currentNode;\r\n         fScore[ni][nj] =\r\n            grid[ni][nj].distance + dist(grid[ni][nj], finishNode);\r\n         if (!discoveredNodes.has(grid[ni][nj]))\r\n            discoveredNodes.add(grid[ni][nj]);\r\n      }\r\n   }\r\n}\r\n","export default function DFS(grid, startNode, finishNode) {\r\n   let visitedSet = new Set();\r\n\r\n   let visitedNodesInOrder = [];\r\n   let stack = [startNode];\r\n\r\n   while (stack.length) {\r\n      const currentNode = stack.pop();\r\n\r\n      visitedNodesInOrder.push(currentNode);\r\n      visitedSet.add(currentNode);\r\n\r\n      if (\r\n         currentNode.row === finishNode.row &&\r\n         currentNode.col === finishNode.col\r\n      )\r\n         return visitedNodesInOrder;\r\n\r\n      updateNeighbours(grid, currentNode, visitedSet, finishNode, stack);\r\n   }\r\n\r\n   return visitedNodesInOrder;\r\n}\r\n\r\nfunction updateNeighbours(grid, currentNode, visitedNodes, finishNode, stack) {\r\n   const dx = [1, 0, 0, -1];\r\n   const dy = [0, 1, -1, 0];\r\n\r\n   // a little trick from Topcoder to access the adjacent nodes\r\n   for (let d = 0; d < 4; d++) {\r\n      const ni = currentNode.row + dx[d];\r\n      const nj = currentNode.col + dy[d];\r\n\r\n      if (\r\n         ni < 0 ||\r\n         ni >= grid.length ||\r\n         nj < 0 ||\r\n         nj >= grid[0].length ||\r\n         (grid[ni][nj].isWall &&\r\n            (ni !== finishNode.row || nj !== finishNode.col)) ||\r\n         visitedNodes.has(grid[ni][nj])\r\n      )\r\n         continue;\r\n\r\n      grid[ni][nj].previous = currentNode;\r\n      stack.push(grid[ni][nj]);\r\n   }\r\n}\r\n","export default function DFS(grid, startNode, finishNode) {\r\n   let visitedSet = new Set();\r\n\r\n   let visitedNodesInOrder = [];\r\n   let queue = [startNode];\r\n\r\n   while (queue.length) {\r\n      const currentNode = queue.shift();\r\n\r\n      visitedNodesInOrder.push(currentNode);\r\n      visitedSet.add(currentNode);\r\n\r\n      if (\r\n         currentNode.row === finishNode.row &&\r\n         currentNode.col === finishNode.col\r\n      )\r\n         return visitedNodesInOrder;\r\n\r\n      updateNeighbours(grid, currentNode, visitedSet, finishNode, queue);\r\n   }\r\n\r\n   return visitedNodesInOrder;\r\n}\r\n\r\nfunction updateNeighbours(grid, currentNode, visitedNodes, finishNode, queue) {\r\n   const dx = [-1, 0, 0, 1];\r\n   const dy = [0, -1, 1, 0];\r\n\r\n   // a little trick from Topcoder to access the adjacent nodes\r\n   for (let d = 0; d < 4; d++) {\r\n      const ni = currentNode.row + dx[d];\r\n      const nj = currentNode.col + dy[d];\r\n\r\n      if (\r\n         ni < 0 ||\r\n         ni >= grid.length ||\r\n         nj < 0 ||\r\n         nj >= grid[0].length ||\r\n         (grid[ni][nj].isWall &&\r\n            (ni !== finishNode.row || nj !== finishNode.col)) ||\r\n         visitedNodes.has(grid[ni][nj])\r\n      )\r\n         continue;\r\n\r\n      visitedNodes.add(grid[ni][nj]);\r\n      grid[ni][nj].previous = currentNode;\r\n      queue.push(grid[ni][nj]);\r\n   }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Node(props) {\r\n   const {\r\n      handleMouseDown,\r\n      handleMouseUp,\r\n      handleMouseOver,\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n   } = props;\r\n\r\n   const [canChange, setCanChange] = useState(true);\r\n\r\n   const getClassName = () => {\r\n      if (isStart) return \"start\";\r\n      else if (isFinish) return \"finish\";\r\n      else if (isWall) return \"wall\";\r\n      else return \"unvisited\";\r\n   };\r\n\r\n   const getIcon = () => {\r\n      if (isStart)\r\n         return (\r\n            <svg viewBox=\"0 0 16 16\" className=\"start-icon\">\r\n               <path d=\"M15.375,7L10,2.54C9.695,2.287,9.461,2,9,2C8.375,2,8,2.516,8,3v3H1C0.45,6,0,6.45,0,7v2c0,0.55,0.45,1,1,1h7v3  c0,0.484,0.375,1,1,1c0.461,0,0.695-0.287,1-0.54L15.375,9C15.758,8.688,16,8.445,16,8S15.758,7.313,15.375,7z\" />\r\n            </svg>\r\n         );\r\n      else if (isFinish)\r\n         return (\r\n            <svg className=\"finish-icon\" viewBox=\"0 0 365.696 365.696\">\r\n               <path d=\"m243.1875 182.859375 113.132812-113.132813c12.5-12.5 12.5-32.765624 0-45.246093l-15.082031-15.082031c-12.503906-12.503907-32.769531-12.503907-45.25 0l-113.128906 113.128906-113.132813-113.152344c-12.5-12.5-32.765624-12.5-45.246093 0l-15.105469 15.082031c-12.5 12.503907-12.5 32.769531 0 45.25l113.152344 113.152344-113.128906 113.128906c-12.503907 12.503907-12.503907 32.769531 0 45.25l15.082031 15.082031c12.5 12.5 32.765625 12.5 45.246093 0l113.132813-113.132812 113.128906 113.132812c12.503907 12.5 32.769531 12.5 45.25 0l15.082031-15.082031c12.5-12.503906 12.5-32.769531 0-45.25zm0 0\" />\r\n            </svg>\r\n         );\r\n      else return;\r\n   };\r\n\r\n   return (\r\n      <td\r\n         id={row + \",\" + col}\r\n         className={getClassName()}\r\n         onMouseDown={() => handleMouseDown(row, col)}\r\n         onMouseUp={handleMouseUp}\r\n         onMouseOver={() => handleMouseOver(row, col, canChange, setCanChange)}\r\n      >\r\n         {getIcon()}\r\n      </td>\r\n   );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Grid.css\";\r\nimport Navbar from \"../Navbar/Navbar.jsx\";\r\nimport Dijkstra from \"../../Algorithms/Dijkstra\";\r\nimport AStar from \"../../Algorithms/AStar\";\r\nimport DFS from \"../../Algorithms/DFS\";\r\nimport BFS from \"../../Algorithms/BFS\";\r\nimport { getShortestPath, animatePath } from \"../../Algorithms/ShortestPath\";\r\nimport Node from \"../Node/Node.jsx\";\r\n\r\nconst NUMBER_OF_ROWS =\r\n   window.innerWidth <= 800 ? 20 : Math.floor(window.innerHeight / 25 - 5);\r\nconst NUMBER_OF_COLUMNS =\r\n   window.innerWidth <= 800 ? 20 : Math.floor(window.innerWidth / 25 - 5);\r\n\r\nlet startRow = Math.floor((NUMBER_OF_ROWS - 1) / 2);\r\nlet startCol = 2;\r\nlet finishRow = Math.floor((NUMBER_OF_ROWS - 1) / 2);\r\nlet finishCol = NUMBER_OF_COLUMNS - 3;\r\n\r\nexport default function Grid() {\r\n   const [nodes, setNodes] = useState(makeInitialGrid());\r\n   const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n   const [currentAlgorithm, setCurrentAlgorithm] = useState(\"Dijkstra's\");\r\n   const [buttonsLocked, setButtonsLocked] = useState(false);\r\n\r\n   const [startIsBeingMoved, setStartIsBeingMoved] = useState(false);\r\n   const [finishIsBeingMoved, setFinishIsBeingMoved] = useState(false);\r\n\r\n   useEffect(() => {\r\n      document.body.addEventListener(\"mousedown\", () => {\r\n         if (!buttonsLocked) setMouseIsPressed(true);\r\n      });\r\n      document.body.addEventListener(\"mouseup\", () => {\r\n         setMouseIsPressed(false);\r\n      });\r\n   }, []);\r\n\r\n   const resetPath = () => {\r\n      const newNodes = makeInitialGrid();\r\n      for (let i = 0; i < NUMBER_OF_ROWS; i++)\r\n         for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\r\n            const node = newNodes[i][j];\r\n            const newNode = {\r\n               ...node,\r\n               isWall: nodes[i][j].isWall,\r\n            };\r\n            newNodes[i][j] = newNode;\r\n         }\r\n\r\n      setNodes(newNodes);\r\n\r\n      for (let i = 0; i < NUMBER_OF_ROWS; i++)\r\n         for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\r\n            if (document.getElementById(i + \",\" + j).className === \"wall\")\r\n               continue;\r\n            let className;\r\n            if (i === startRow && j === startCol) className = \"start\";\r\n            else if (i === finishRow && j === finishCol) className = \"finish\";\r\n            else className = \"unvisited\";\r\n            document.getElementById(i + \",\" + j).className = className;\r\n         }\r\n   };\r\n\r\n   const resetGrid = () => {\r\n      if (buttonsLocked) return;\r\n      resetPath();\r\n      for (let i = 0; i < NUMBER_OF_ROWS; i++)\r\n         for (let j = 0; j < NUMBER_OF_COLUMNS; j++)\r\n            if (nodes[i][j].isWall) {\r\n               const newNodes = makeWall(nodes, i, j);\r\n               setNodes(newNodes);\r\n            }\r\n   };\r\n\r\n   const handleMouseDown = (row, col) => {\r\n      if (buttonsLocked) return;\r\n\r\n      if (startRow === row && startCol === col) {\r\n         setStartIsBeingMoved(true);\r\n      } else if (finishRow === row && finishCol === col) {\r\n         setFinishIsBeingMoved(true);\r\n      } else {\r\n         const newNodes = makeWall(nodes, row, col);\r\n         setNodes(newNodes);\r\n      }\r\n   };\r\n\r\n   const handleMouseUp = () => {\r\n      setStartIsBeingMoved(false);\r\n      setFinishIsBeingMoved(false);\r\n   };\r\n\r\n   const handleMouseOver = (row, col, canChange, setCanChange) => {\r\n      if (!mouseIsPressed || buttonsLocked || !canChange) return;\r\n      setCanChange(false);\r\n      setTimeout(() => {\r\n         setCanChange(true);\r\n      }, 500);\r\n      if (startIsBeingMoved) {\r\n         resetPath();\r\n         const newGrid = moveStart(nodes, row, col);\r\n         setNodes(newGrid);\r\n      } else if (finishIsBeingMoved) {\r\n         resetPath();\r\n         const newGrid = moveFinish(nodes, row, col);\r\n         setNodes(newGrid);\r\n      } else {\r\n         const newNodes = makeWall(nodes, row, col);\r\n         setNodes(newNodes);\r\n      }\r\n   };\r\n\r\n   const animateShortestPath = () => {\r\n      if (buttonsLocked) return;\r\n      resetPath();\r\n\r\n      const grid = nodes.slice();\r\n\r\n      let visitedNodes;\r\n      if (currentAlgorithm === \"Dijkstra's\")\r\n         visitedNodes = Dijkstra(\r\n            grid,\r\n            grid[startRow][startCol],\r\n            grid[finishRow][finishCol]\r\n         );\r\n      else if (currentAlgorithm === \"A*\")\r\n         visitedNodes = AStar(\r\n            grid,\r\n            grid[startRow][startCol],\r\n            grid[finishRow][finishCol]\r\n         );\r\n      else if (currentAlgorithm === \"DFS\")\r\n         visitedNodes = DFS(\r\n            grid,\r\n            grid[startRow][startCol],\r\n            grid[finishRow][finishCol]\r\n         );\r\n      else if (currentAlgorithm === \"BFS\")\r\n         visitedNodes = BFS(\r\n            grid,\r\n            grid[startRow][startCol],\r\n            grid[finishRow][finishCol]\r\n         );\r\n      else return;\r\n\r\n      const shortestPathNodes = getShortestPath(\r\n         grid,\r\n         grid[finishRow][finishCol]\r\n      );\r\n      animatePath(grid, visitedNodes, shortestPathNodes, setButtonsLocked);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Navbar\r\n            animate={animateShortestPath}\r\n            reset={resetGrid}\r\n            changeAlg={setCurrentAlgorithm}\r\n            currAlg={currentAlgorithm}\r\n         />\r\n         <div className=\"grid\">\r\n            <table>\r\n               <tbody>\r\n                  {nodes.map((currentRow, rowIndex) => {\r\n                     return (\r\n                        <tr id={\"row-\" + rowIndex} key={rowIndex}>\r\n                           {currentRow.map((node) => {\r\n                              const { row, col, isStart, isFinish, isWall } =\r\n                                 node;\r\n                              return (\r\n                                 <Node\r\n                                    handleMouseDown={handleMouseDown}\r\n                                    handleMouseUp={handleMouseUp}\r\n                                    handleMouseOver={handleMouseOver}\r\n                                    row={row}\r\n                                    col={col}\r\n                                    isStart={isStart}\r\n                                    isFinish={isFinish}\r\n                                    isWall={isWall}\r\n                                    key={col}\r\n                                 />\r\n                              );\r\n                           })}\r\n                        </tr>\r\n                     );\r\n                  })}\r\n               </tbody>\r\n            </table>\r\n         </div>\r\n      </>\r\n   );\r\n}\r\n\r\nconst makeWall = (grid, row, col) => {\r\n   const newGrid = [...grid];\r\n   const node = newGrid[row][col];\r\n   const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n   };\r\n   newGrid[row][col] = newNode;\r\n   return newGrid;\r\n};\r\n\r\nconst moveStart = (grid, row, col) => {\r\n   const newGrid = [...grid];\r\n   if (row === finishRow && col === finishCol) return newGrid;\r\n   const startNode = newGrid[startRow][startCol];\r\n   const currentNode = newGrid[row][col];\r\n\r\n   startRow = row;\r\n   startCol = col;\r\n\r\n   // new node but keep the isWall prop\r\n   let newStartNode = createNode(startNode.row, startNode.col);\r\n   newStartNode = {\r\n      ...newStartNode,\r\n      isWall: startNode.isWall,\r\n   };\r\n   newGrid[startNode.row][startNode.col] = newStartNode;\r\n\r\n   // new node but keep the isWall prop\r\n   let newNode = createNode(row, col);\r\n   newNode = {\r\n      ...newNode,\r\n      isWall: currentNode.isWall,\r\n   };\r\n   newGrid[row][col] = newNode;\r\n\r\n   return newGrid;\r\n};\r\n\r\nconst moveFinish = (grid, row, col) => {\r\n   const newGrid = [...grid];\r\n   if (row === startRow && col === startCol) return newGrid;\r\n   const finishNode = newGrid[finishRow][finishCol];\r\n   const currentNode = newGrid[row][col];\r\n\r\n   finishRow = row;\r\n   finishCol = col;\r\n\r\n   // new node but keep the isWall prop\r\n   let newFinishNode = createNode(finishNode.row, finishNode.col);\r\n   newFinishNode = {\r\n      ...newFinishNode,\r\n      isWall: finishNode.isWall,\r\n   };\r\n   newGrid[finishNode.row][finishNode.col] = newFinishNode;\r\n\r\n   // new node but keep the isWall prop\r\n   let newNode = createNode(row, col);\r\n   newNode = {\r\n      ...newNode,\r\n      isWall: currentNode.isWall,\r\n   };\r\n   newGrid[row][col] = newNode;\r\n\r\n   return newGrid;\r\n};\r\n\r\nconst makeInitialGrid = () => {\r\n   const grid = [];\r\n   for (let i = 0; i < NUMBER_OF_ROWS; i++) {\r\n      const currentRow = [];\r\n      for (let j = 0; j < NUMBER_OF_COLUMNS; j++)\r\n         currentRow.push(createNode(i, j));\r\n      grid.push(currentRow);\r\n   }\r\n   return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n   return {\r\n      row: row,\r\n      col: col,\r\n      isStart: row === startRow && col === startCol,\r\n      isFinish: row === finishRow && col === finishCol,\r\n      isWall: false,\r\n      distance: Infinity,\r\n      previous: null,\r\n   };\r\n};\r\n","export function animatePath(\r\n   grid,\r\n   visitedNodesInOrder,\r\n   shortestPathNodes,\r\n   setButtonsLocked\r\n) {\r\n   // lock the buttons\r\n   setButtonsLocked(true);\r\n\r\n   // animate the visited nodes\r\n   for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      setTimeout(() => {\r\n         const node = visitedNodesInOrder[i];\r\n         document.getElementById(node.row + \",\" + node.col).className =\r\n            \"visited\";\r\n      }, 5 * i);\r\n   }\r\n\r\n   // wait until the visited nodes finished animating, and then animate the path\r\n   setTimeout(() => {\r\n      for (let i = 0; i < shortestPathNodes.length; i++) {\r\n         setTimeout(() => {\r\n            const node = shortestPathNodes[i];\r\n            document.getElementById(node.row + \",\" + node.col).className =\r\n               \"shortest-path\";\r\n         }, 25 * i);\r\n      }\r\n   }, 5 * visitedNodesInOrder.length);\r\n\r\n   // unlock the buttons\r\n   setTimeout(\r\n      () => setButtonsLocked(false),\r\n      5 * visitedNodesInOrder.length + 25 * shortestPathNodes.length\r\n   );\r\n}\r\n\r\nexport function getShortestPath(grid, finishNode) {\r\n   if (finishNode.previous === null) return [];\r\n\r\n   let shortestPathNodes = [];\r\n   let currentNode = finishNode;\r\n   while (currentNode != null) {\r\n      shortestPathNodes.unshift(currentNode);\r\n      currentNode = currentNode.previous;\r\n   }\r\n   return shortestPathNodes;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Grid from \"./Components/Grid/Grid.jsx\";\r\n\r\nfunction App() {\r\n   return (\r\n      <div className=\"App\">\r\n         <Grid />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}